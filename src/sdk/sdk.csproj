<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <AssemblyName>Foo.Tasks</AssemblyName>
        <BuildOutputTargetFolder>tools</BuildOutputTargetFolder>
        <DevelopmentDependency>true</DevelopmentDependency>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <IsPackable>true</IsPackable>
        <PackageId>Foo.Sdk</PackageId>
        <PackageType>MSBuildSdk</PackageType>
        <RootNamespace>Foo.Tasks</RootNamespace>
        <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
        <TargetFrameworks>net6.0; net472</TargetFrameworks>
    </PropertyGroup>

    <ItemGroup>
        <None Include="Sdk/**/*"
              Pack="true"
              PackagePath="%(RelativeDir)" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.Build.Utilities.Core" />
    </ItemGroup>

    <!--
    This target writes some shared files into src/samples which ensure that all
    the sample projects will use the SDK package we just built.
    -->
    <Target Name="_WriteSharedFiles"
            DependsOnTargets="GetBuildVersion"
            AfterTargets="Build">
        <PropertyGroup>
            <_GlobalJson>
                <![CDATA[
{
  "$schema": "https://json.schemastore.org/global.json",
  "msbuild-sdks": {
    "Foo.Sdk": "$(Version)"
  }
}
                ]]>
            </_GlobalJson>
            <_NuGetConfig>
                <![CDATA[
<configuration>
    <config>
        <add key="globalPackagesFolder" value="$(PackageRestorePath)" />
    </config>
    <packageSources>
        <add key="foo-sdk" value="$(PackageOutputPath)" />
    </packageSources>
</configuration>
                ]]>
            </_NuGetConfig>
        </PropertyGroup>

        <WriteLinesToFile File="../samples/global.json"
                          Lines="$(_GlobalJson)"
                          Overwrite="true"
                          WriteOnlyWhenDifferent="true" />
        <WriteLinesToFile File="../samples/nuget.config"
                          Lines="$(_NuGetConfig)"
                          Overwrite="true"
                          WriteOnlyWhenDifferent="true" />
    </Target>

    <!--
    This target removes the restored SDK package used by the sample project,
    thus ensuring that NuGet will not use a stale package because the version
    did not change.
    -->
    <Target Name="_ClearPackageCache"
            AfterTargets="Build">
        <PropertyGroup>
            <_PackageDirectory>$(PackageRestorePath)$(PackageId.ToLowerInvariant())</_PackageDirectory>
        </PropertyGroup>

        <RemoveDir Directories="$(_PackageDirectory)"
                   Condition="Exists('$(_PackageDirectory)')" />
    </Target>
</Project>
